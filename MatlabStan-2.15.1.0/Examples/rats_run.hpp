
// Code generated by stanc 4de24914
#include <stan/model/model_header.hpp>
namespace rats_run_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 13, column 2 to column 16)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 14, column 2 to column 15)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 16, column 2 to column 16)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 17, column 2 to column 15)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 19, column 2 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 20, column 2 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 21, column 2 to column 29)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 24, column 2 to column 24)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 25, column 2 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 26, column 2 to column 27)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 28, column 2 to column 29)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 29, column 2 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 30, column 2 to column 35)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 46, column 2 to column 14)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 47, column 2 to column 38)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 33, column 2 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 34, column 2 to column 27)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 35, column 2 to column 38)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 36, column 2 to column 42)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 37, column 2 to column 41)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 38, column 2 to column 40)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 39, column 2 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 42, column 6 to column 67)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 41, column 4 to line 42, column 67)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 40, column 2 to line 42, column 67)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 6, column 2 to column 17)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 7, column 2 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 8, column 9 to column 11)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 8, column 2 to column 13)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 9, column 9 to column 10)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 9, column 11 to column 13)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 9, column 2 to column 15)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 10, column 2 to column 12)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 13, column 13 to column 14)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/MatlabStan-2.15.1.0/Examples/rats_run.stan', line 14, column 12 to column 13)"};



class rats_run_model final : public model_base_crtp<rats_run_model> {

 private:
  int N;
  int TT;
  std::vector<double> x;
  std::vector<std::vector<double>> y;
  double xbar;
 
 public:
  ~rats_run_model() final { }
  
  std::string model_name() const final { return "rats_run_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 4de24914");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  rats_run_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "rats_run_model_namespace::rats_run_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","TT","int",
          context__.to_vec());
      TT = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      TT = context__.vals_i("TT")[(1 - 1)];
      current_statement__ = 27;
      current_statement__ = 27;
      check_greater_or_equal(function__, "TT", TT, 0);
      current_statement__ = 28;
      validate_non_negative_index("x", "TT", TT);
      current_statement__ = 29;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(TT));
      x = std::vector<double>(TT, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 29;
      assign(x, nil_index_list(), context__.vals_r("x"),
        "assigning variable x");
      current_statement__ = 30;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 31;
      validate_non_negative_index("y", "TT", TT);
      current_statement__ = 32;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N, TT));
      y = std::vector<std::vector<double>>(N, std::vector<double>(TT, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 32;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= TT; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 32;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 32;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 33;
      context__.validate_dims("data initialization","xbar","double",
          context__.to_vec());
      xbar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      xbar = context__.vals_r("xbar")[(1 - 1)];
      current_statement__ = 34;
      validate_non_negative_index("alpha", "N", N);
      current_statement__ = 35;
      validate_non_negative_index("beta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N;
      num_params_r__ += N;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "rats_run_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      std::vector<local_scalar_t__> beta;
      beta = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable beta");}
      local_scalar_t__ mu_alpha;
      mu_alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      mu_alpha = in__.scalar();
      local_scalar_t__ mu_beta;
      mu_beta = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu_beta = in__.scalar();
      local_scalar_t__ sigmasq_y;
      sigmasq_y = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigmasq_y = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigmasq_y = stan::math::lb_constrain(sigmasq_y, 0, lp__);
      } else {
        current_statement__ = 5;
        sigmasq_y = stan::math::lb_constrain(sigmasq_y, 0);
      }
      local_scalar_t__ sigmasq_alpha;
      sigmasq_alpha = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigmasq_alpha = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigmasq_alpha = stan::math::lb_constrain(sigmasq_alpha, 0, lp__);
      } else {
        current_statement__ = 6;
        sigmasq_alpha = stan::math::lb_constrain(sigmasq_alpha, 0);
      }
      local_scalar_t__ sigmasq_beta;
      sigmasq_beta = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigmasq_beta = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigmasq_beta = stan::math::lb_constrain(sigmasq_beta, 0, lp__);
      } else {
        current_statement__ = 7;
        sigmasq_beta = stan::math::lb_constrain(sigmasq_beta, 0);
      }
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__;
      
      local_scalar_t__ sigma_alpha;
      sigma_alpha = DUMMY_VAR__;
      
      local_scalar_t__ sigma_beta;
      sigma_beta = DUMMY_VAR__;
      
      current_statement__ = 11;
      sigma_y = stan::math::sqrt(sigmasq_y);
      current_statement__ = 12;
      sigma_alpha = stan::math::sqrt(sigmasq_alpha);
      current_statement__ = 13;
      sigma_beta = stan::math::sqrt(sigmasq_beta);
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma_alpha", sigma_alpha, 0);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
      {
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(mu_alpha, 0, 100));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(mu_beta, 0, 100));
        current_statement__ = 18;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigmasq_y, 0.001, 0.001));
        current_statement__ = 19;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigmasq_alpha, 0.001, 0.001));
        current_statement__ = 20;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigmasq_beta, 0.001, 0.001));
        current_statement__ = 21;
        lp_accum__.add(normal_lpdf<propto__>(alpha, mu_alpha, sigma_alpha));
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(beta, mu_beta, sigma_beta));
        current_statement__ = 25;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 24;
          for (int t = 1; t <= TT; ++t) {
            current_statement__ = 23;
            lp_accum__.add(
              normal_lpdf<propto__>(y[(n - 1)][(t - 1)],
                (alpha[(n - 1)] + (beta[(n - 1)] * (x[(t - 1)] - xbar))),
                sigma_y));}}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "rats_run_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<double> alpha;
      alpha = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      std::vector<double> beta;
      beta = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable beta");}
      double mu_alpha;
      mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_alpha = in__.scalar();
      double mu_beta;
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_beta = in__.scalar();
      double sigmasq_y;
      sigmasq_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigmasq_y = in__.scalar();
      current_statement__ = 5;
      sigmasq_y = stan::math::lb_constrain(sigmasq_y, 0);
      double sigmasq_alpha;
      sigmasq_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigmasq_alpha = in__.scalar();
      current_statement__ = 6;
      sigmasq_alpha = stan::math::lb_constrain(sigmasq_alpha, 0);
      double sigmasq_beta;
      sigmasq_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigmasq_beta = in__.scalar();
      current_statement__ = 7;
      sigmasq_beta = stan::math::lb_constrain(sigmasq_beta, 0);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_alpha;
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_beta;
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      vars__.emplace_back(mu_alpha);
      vars__.emplace_back(mu_beta);
      vars__.emplace_back(sigmasq_y);
      vars__.emplace_back(sigmasq_alpha);
      vars__.emplace_back(sigmasq_beta);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      sigma_y = stan::math::sqrt(sigmasq_y);
      current_statement__ = 12;
      sigma_alpha = stan::math::sqrt(sigmasq_alpha);
      current_statement__ = 13;
      sigma_beta = stan::math::sqrt(sigmasq_beta);
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma_alpha", sigma_alpha, 0);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(sigma_y);
        vars__.emplace_back(sigma_alpha);
        vars__.emplace_back(sigma_beta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double alpha0;
      alpha0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      alpha0 = (mu_alpha - (xbar * mu_beta));
      vars__.emplace_back(alpha0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> alpha;
      alpha = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> beta;
      beta = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(beta, nil_index_list(), context__.vals_r("beta"),
        "assigning variable beta");
      double mu_alpha;
      mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_alpha = context__.vals_r("mu_alpha")[(1 - 1)];
      double mu_beta;
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_beta = context__.vals_r("mu_beta")[(1 - 1)];
      double sigmasq_y;
      sigmasq_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigmasq_y = context__.vals_r("sigmasq_y")[(1 - 1)];
      double sigmasq_y_free__;
      sigmasq_y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigmasq_y_free__ = stan::math::lb_free(sigmasq_y, 0);
      double sigmasq_alpha;
      sigmasq_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigmasq_alpha = context__.vals_r("sigmasq_alpha")[(1 - 1)];
      double sigmasq_alpha_free__;
      sigmasq_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigmasq_alpha_free__ = stan::math::lb_free(sigmasq_alpha, 0);
      double sigmasq_beta;
      sigmasq_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigmasq_beta = context__.vals_r("sigmasq_beta")[(1 - 1)];
      double sigmasq_beta_free__;
      sigmasq_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigmasq_beta_free__ = stan::math::lb_free(sigmasq_beta, 0);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      vars__.emplace_back(mu_alpha);
      vars__.emplace_back(mu_beta);
      vars__.emplace_back(sigmasq_y_free__);
      vars__.emplace_back(sigmasq_alpha_free__);
      vars__.emplace_back(sigmasq_beta_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha");
    names__.emplace_back("beta");
    names__.emplace_back("mu_alpha");
    names__.emplace_back("mu_beta");
    names__.emplace_back("sigmasq_y");
    names__.emplace_back("sigmasq_alpha");
    names__.emplace_back("sigmasq_beta");
    names__.emplace_back("sigma_y");
    names__.emplace_back("sigma_alpha");
    names__.emplace_back("sigma_beta");
    names__.emplace_back("alpha0");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigmasq_y");
    param_names__.emplace_back(std::string() + "sigmasq_alpha");
    param_names__.emplace_back(std::string() + "sigmasq_beta");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_y");
      param_names__.emplace_back(std::string() + "sigma_alpha");
      param_names__.emplace_back(std::string() + "sigma_beta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha0");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigmasq_y");
    param_names__.emplace_back(std::string() + "sigmasq_alpha");
    param_names__.emplace_back(std::string() + "sigmasq_beta");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_y");
      param_names__.emplace_back(std::string() + "sigma_alpha");
      param_names__.emplace_back(std::string() + "sigma_beta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha0");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmasq_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = rats_run_model_namespace::rats_run_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif



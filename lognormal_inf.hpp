
// Code generated by stanc 4de24914
#include <stan/model/model_header.hpp>
namespace lognormal_inf_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 77, column 4 to column 39)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 78, column 4 to column 45)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 80, column 4 to column 32)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 81, column 4 to column 31)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 83, column 4 to column 12)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 84, column 4 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 92, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 92, column 4 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 93, column 4 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 94, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 94, column 19 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 94, column 4 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 95, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 95, column 19 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 95, column 4 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 96, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 96, column 4 to column 27)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 97, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 97, column 19 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 97, column 4 to column 36)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 98, column 11 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 98, column 19 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 98, column 4 to column 40)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 100, column 4 to column 14)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 105, column 8 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 108, column 8 to column 47)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 112, column 8 to column 21)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 114, column 12 to column 110)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 115, column 12 to column 42)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 113, column 31 to line 116, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 113, column 8 to line 116, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 119, column 12 to column 56)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 118, column 31 to line 120, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 118, column 8 to line 120, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 123, column 8 to column 35)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 124, column 8 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 126, column 8 to column 31)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 127, column 8 to column 38)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 129, column 8 to column 59)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 130, column 8 to column 55)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 133, column 12 to column 45)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 132, column 31 to line 134, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 132, column 8 to line 134, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 145, column 8 to column 70)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 103, column 26 to line 146, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 103, column 4 to line 146, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 38, column 4 to column 14)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 39, column 4 to column 17)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 41, column 21 to column 29)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 41, column 30 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 41, column 4 to column 39)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 42, column 19 to column 27)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 42, column 28 to column 33)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 42, column 4 to column 35)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 46, column 4 to column 25)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 47, column 20 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 47, column 4 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 48, column 11 to column 19)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 48, column 20 to column 27)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 48, column 4 to column 46)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 49, column 18 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 49, column 27 to column 32)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 49, column 4 to column 34)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 52, column 8 to column 26)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 54, column 12 to column 46)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 53, column 31 to line 55, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 53, column 8 to line 55, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 51, column 26 to line 56, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 51, column 4 to line 56, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 60, column 12 to column 76)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 59, column 31 to line 61, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 59, column 8 to line 61, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 58, column 26 to line 62, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 58, column 4 to line 62, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 66, column 12 to column 51)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 65, column 27 to line 67, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 65, column 8 to line 67, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 64, column 26 to line 68, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 64, column 4 to line 68, column 5)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 3, column 15 to column 30)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 3, column 8 to column 37)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 4, column 8 to column 21)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 5, column 8 to column 18)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 6, column 8 to column 25)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 7, column 15 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 7, column 30 to column 43)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 7, column 8 to column 57)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 8, column 15 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 8, column 30 to column 43)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 8, column 8 to column 57)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 10, column 8 to column 59)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 11, column 8 to column 59)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 13, column 8 to column 47)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 14, column 8 to column 44)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 17, column 8 to column 22)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 20, column 16 to column 28)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 19, column 46 to line 21, column 13)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 19, column 12 to line 21, column 13)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 22, column 12 to column 38)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 18, column 37 to line 23, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 18, column 8 to line 23, column 9)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 26, column 8 to column 69)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 29, column 8 to column 34)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 31, column 8 to column 20)",
                                                      " (in '/home/george/OneDrive/OPTIMLab/Grants/Aerosols/code/aerosols/lognormal_inf.stan', line 2, column 62 to line 33, column 5)"};


template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
my_mvn_lpdf(const Eigen::Matrix<T0__, -1, 1>& x,
            const Eigen::Matrix<T1__, -1, 1>& mu_mvn,
            const Eigen::Matrix<T2__, -1, -1>& sig_mvn,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 80;
    validate_non_negative_index("eigs", "num_elements(x)", num_elements(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> eigs;
    eigs = Eigen::Matrix<local_scalar_t__, -1, 1>(num_elements(x));
    stan::math::fill(eigs, DUMMY_VAR__);
    
    local_scalar_t__ det_est;
    det_est = DUMMY_VAR__;
    
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    local_scalar_t__ normAttempt;
    normAttempt = DUMMY_VAR__;
    
    current_statement__ = 85;
    validate_non_negative_index("sig_mvn_inv", "rows(sig_mvn)", rows(sig_mvn));
    current_statement__ = 86;
    validate_non_negative_index("sig_mvn_inv", "cols(sig_mvn)", cols(sig_mvn));
    Eigen::Matrix<local_scalar_t__, -1, -1> sig_mvn_inv;
    sig_mvn_inv = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(sig_mvn), 
      cols(sig_mvn));
    stan::math::fill(sig_mvn_inv, DUMMY_VAR__);
    
    current_statement__ = 88;
    validate_non_negative_index("sig_mvn_sym", "rows(sig_mvn)", rows(sig_mvn));
    current_statement__ = 89;
    validate_non_negative_index("sig_mvn_sym", "cols(sig_mvn)", cols(sig_mvn));
    Eigen::Matrix<local_scalar_t__, -1, -1> sig_mvn_sym;
    sig_mvn_sym = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(sig_mvn), 
      cols(sig_mvn));
    stan::math::fill(sig_mvn_sym, DUMMY_VAR__);
    
    current_statement__ = 91;
    assign(sig_mvn_inv, nil_index_list(),
      multiply(inverse(multiply(sig_mvn, transpose(sig_mvn))),
        transpose(sig_mvn)), "assigning variable sig_mvn_inv");
    current_statement__ = 92;
    prob = multiply(
             multiply(multiply((-1 * 0.5), transpose(subtract(x, mu_mvn))),
               sig_mvn_inv), subtract(x, mu_mvn));
    current_statement__ = 93;
    assign(sig_mvn_sym, nil_index_list(),
      multiply(0.5, add(sig_mvn, transpose(sig_mvn))),
      "assigning variable sig_mvn_sym");
    current_statement__ = 94;
    assign(eigs, nil_index_list(), eigenvalues_sym(sig_mvn_sym),
      "assigning variable eigs");
    current_statement__ = 95;
    det_est = 1.0;
    current_statement__ = 101;
    for (int n = 1; n <= num_elements(x); ++n) {
      current_statement__ = 98;
      if (logical_lt(eigs[(n - 1)], (pow(10, -9) * max(eigs)))) {
        current_statement__ = 96;
        assign(eigs, cons_list(index_uni(n), nil_index_list()), 1,
          "assigning variable eigs");
      } 
      current_statement__ = 99;
      det_est = (det_est * eigs[(n - 1)]);}
    current_statement__ = 102;
    normAttempt = (0.5 *
                    stan::math::log(
                      (stan::math::abs(det_est) *
                        pow((2 * stan::math::pi()), num_elements(x)))));
    current_statement__ = 103;
    prob = (prob - normAttempt);
    current_statement__ = 104;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct my_mvn_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x,
           const Eigen::Matrix<T1__, -1, 1>& mu_mvn,
           const Eigen::Matrix<T2__, -1, -1>& sig_mvn,
           std::ostream* pstream__)  const 
{
return my_mvn_lpdf<propto__>(x, mu_mvn, sig_mvn, pstream__);
}
};

class lognormal_inf_model final : public model_base_crtp<lognormal_inf_model> {

 private:
  int Nbins;
  int Nsamples;
  std::vector<std::vector<double>> data_counts;
  std::vector<std::vector<double>> diameters;
  double newCount;
  std::vector<double> totalCount;
  Eigen::Matrix<double, -1, -1> data_counts_norm;
  std::vector<std::vector<double>> logradii;
 
 public:
  ~lognormal_inf_model() final { }
  
  std::string model_name() const final { return "lognormal_inf_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 4de24914");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  lognormal_inf_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "lognormal_inf_model_namespace::lognormal_inf_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","Nbins","int",
          context__.to_vec());
      Nbins = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      Nbins = context__.vals_i("Nbins")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","Nsamples","int",
          context__.to_vec());
      Nsamples = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      Nsamples = context__.vals_i("Nsamples")[(1 - 1)];
      current_statement__ = 49;
      validate_non_negative_index("data_counts", "Nsamples", Nsamples);
      current_statement__ = 50;
      validate_non_negative_index("data_counts", "Nbins - 1", (Nbins - 1));
      current_statement__ = 51;
      context__.validate_dims("data initialization","data_counts","double",
          context__.to_vec(Nsamples, (Nbins - 1)));
      data_counts = std::vector<std::vector<double>>(Nsamples, std::vector<double>(
        (Nbins - 1), std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> data_counts_flat__;
        current_statement__ = 51;
        assign(data_counts_flat__, nil_index_list(),
          context__.vals_r("data_counts"),
          "assigning variable data_counts_flat__");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= (Nbins - 1); ++sym1__) {
          current_statement__ = 51;
          for (int sym2__ = 1; sym2__ <= Nsamples; ++sym2__) {
            current_statement__ = 51;
            assign(data_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              data_counts_flat__[(pos__ - 1)],
              "assigning variable data_counts");
            current_statement__ = 51;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 52;
      validate_non_negative_index("diameters", "Nsamples", Nsamples);
      current_statement__ = 53;
      validate_non_negative_index("diameters", "Nbins", Nbins);
      current_statement__ = 54;
      context__.validate_dims("data initialization","diameters","double",
          context__.to_vec(Nsamples, Nbins));
      diameters = std::vector<std::vector<double>>(Nsamples, std::vector<double>(Nbins, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> diameters_flat__;
        current_statement__ = 54;
        assign(diameters_flat__, nil_index_list(),
          context__.vals_r("diameters"),
          "assigning variable diameters_flat__");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= Nbins; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= Nsamples; ++sym2__) {
            current_statement__ = 54;
            assign(diameters,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              diameters_flat__[(pos__ - 1)], "assigning variable diameters");
            current_statement__ = 54;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 55;
      newCount = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      newCount = 1000;
      current_statement__ = 56;
      validate_non_negative_index("totalCount", "Nsamples", Nsamples);
      current_statement__ = 57;
      totalCount = std::vector<double>(Nsamples, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 58;
      validate_non_negative_index("data_counts_norm", "Nsamples", Nsamples);
      current_statement__ = 59;
      validate_non_negative_index("data_counts_norm", "Nbins - 1",
                                  (Nbins - 1));
      current_statement__ = 60;
      data_counts_norm = Eigen::Matrix<double, -1, -1>(Nsamples, (Nbins - 1));
      stan::math::fill(data_counts_norm, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 61;
      validate_non_negative_index("logradii", "Nsamples", Nsamples);
      current_statement__ = 62;
      validate_non_negative_index("logradii", "Nbins", Nbins);
      current_statement__ = 63;
      logradii = std::vector<std::vector<double>>(Nsamples, std::vector<double>(Nbins, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 69;
      for (int m = 1; m <= Nsamples; ++m) {
        current_statement__ = 64;
        assign(totalCount, cons_list(index_uni(m), nil_index_list()), 0,
          "assigning variable totalCount");
        current_statement__ = 67;
        for (int n = 1; n <= (Nbins - 1); ++n) {
          current_statement__ = 65;
          assign(totalCount, cons_list(index_uni(m), nil_index_list()),
            (totalCount[(m - 1)] + data_counts[(m - 1)][(n - 1)]),
            "assigning variable totalCount");}}
      current_statement__ = 74;
      for (int m = 1; m <= Nsamples; ++m) {
        current_statement__ = 72;
        for (int n = 1; n <= (Nbins - 1); ++n) {
          current_statement__ = 70;
          assign(data_counts_norm,
            cons_list(index_uni(m),
              cons_list(index_uni(n), nil_index_list())),
            ((data_counts[(m - 1)][(n - 1)] / totalCount[(m - 1)]) *
              newCount), "assigning variable data_counts_norm");}}
      current_statement__ = 79;
      for (int m = 1; m <= Nsamples; ++m) {
        current_statement__ = 77;
        for (int n = 1; n <= Nbins; ++n) {
          current_statement__ = 75;
          assign(logradii,
            cons_list(index_uni(m),
              cons_list(index_uni(n), nil_index_list())),
            stan::math::log((diameters[(m - 1)][(n - 1)] / 2)),
            "assigning variable logradii");}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "lognormal_inf_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ mu_mu;
      mu_mu = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu_mu = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        mu_mu = stan::math::lub_constrain(mu_mu, -2, 50, lp__);
      } else {
        current_statement__ = 1;
        mu_mu = stan::math::lub_constrain(mu_mu, -2, 50);
      }
      local_scalar_t__ mu_sigma;
      mu_sigma = DUMMY_VAR__;
      
      current_statement__ = 2;
      mu_sigma = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        mu_sigma = stan::math::lub_constrain(mu_sigma, 0.001, 50, lp__);
      } else {
        current_statement__ = 2;
        mu_sigma = stan::math::lub_constrain(mu_sigma, 0.001, 50);
      }
      local_scalar_t__ sigma_alpha;
      sigma_alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma_alpha = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0);
      }
      local_scalar_t__ sigma_beta;
      sigma_beta = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_beta = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_beta = stan::math::lb_constrain(sigma_beta, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_beta = stan::math::lb_constrain(sigma_beta, 0);
      }
      local_scalar_t__ mu;
      mu = DUMMY_VAR__;
      
      current_statement__ = 5;
      mu = in__.scalar();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      {
        current_statement__ = 7;
        validate_non_negative_index("normprobs", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> normprobs;
        normprobs = Eigen::Matrix<local_scalar_t__, -1, 1>((Nbins - 1));
        stan::math::fill(normprobs, DUMMY_VAR__);
        
        local_scalar_t__ probNorm;
        probNorm = DUMMY_VAR__;
        
        current_statement__ = 10;
        validate_non_negative_index("P", "Nbins - 1", (Nbins - 1));
        current_statement__ = 11;
        validate_non_negative_index("P", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> P;
        P = Eigen::Matrix<local_scalar_t__, -1, -1>((Nbins - 1), (Nbins - 1));
        stan::math::fill(P, DUMMY_VAR__);
        
        current_statement__ = 13;
        validate_non_negative_index("M", "Nbins - 1", (Nbins - 1));
        current_statement__ = 14;
        validate_non_negative_index("M", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> M;
        M = Eigen::Matrix<local_scalar_t__, -1, -1>((Nbins - 1), (Nbins - 1));
        stan::math::fill(M, DUMMY_VAR__);
        
        current_statement__ = 16;
        validate_non_negative_index("mu_mvn", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_mvn;
        mu_mvn = Eigen::Matrix<local_scalar_t__, -1, 1>((Nbins - 1));
        stan::math::fill(mu_mvn, DUMMY_VAR__);
        
        current_statement__ = 18;
        validate_non_negative_index("sig_mvn", "Nbins - 1", (Nbins - 1));
        current_statement__ = 19;
        validate_non_negative_index("sig_mvn", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> sig_mvn;
        sig_mvn = Eigen::Matrix<local_scalar_t__, -1, -1>((Nbins - 1), 
          (Nbins - 1));
        stan::math::fill(sig_mvn, DUMMY_VAR__);
        
        current_statement__ = 21;
        validate_non_negative_index("sig_mvn_inv", "Nbins - 1", (Nbins - 1));
        current_statement__ = 22;
        validate_non_negative_index("sig_mvn_inv", "Nbins - 1", (Nbins - 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> sig_mvn_inv;
        sig_mvn_inv = Eigen::Matrix<local_scalar_t__, -1, -1>((Nbins - 1), 
          (Nbins - 1));
        stan::math::fill(sig_mvn_inv, DUMMY_VAR__);
        
        local_scalar_t__ temp;
        temp = DUMMY_VAR__;
        
        current_statement__ = 46;
        for (int m = 1; m <= Nsamples; ++m) {
          current_statement__ = 25;
          lp_accum__.add(normal_lpdf<propto__>(mu, mu_mu, mu_sigma));
          current_statement__ = 26;
          lp_accum__.add(gamma_lpdf<propto__>(sigma, sigma_alpha, sigma_beta));
          current_statement__ = 27;
          probNorm = 0;
          current_statement__ = 31;
          for (int n = 1; n <= (Nbins - 1); ++n) {
            current_statement__ = 28;
            assign(normprobs, cons_list(index_uni(n), nil_index_list()),
              (normal_lcdf(logradii[(m - 1)][((n + 1) - 1)], mu, sigma) -
                normal_lcdf(logradii[(m - 1)][(n - 1)], mu, sigma)),
              "assigning variable normprobs");
            current_statement__ = 29;
            probNorm = (probNorm + stan::math::exp(normprobs[(n - 1)]));}
          current_statement__ = 34;
          for (int n = 1; n <= (Nbins - 1); ++n) {
            current_statement__ = 32;
            assign(normprobs, cons_list(index_uni(n), nil_index_list()),
              (normprobs[(n - 1)] - stan::math::log(probNorm)),
              "assigning variable normprobs");}
          current_statement__ = 35;
          assign(P, nil_index_list(), diag_matrix(normprobs),
            "assigning variable P");
          current_statement__ = 36;
          assign(M, nil_index_list(),
            subtract(P, multiply(normprobs, transpose(normprobs))),
            "assigning variable M");
          current_statement__ = 37;
          assign(sig_mvn, nil_index_list(), multiply(M, newCount),
            "assigning variable sig_mvn");
          current_statement__ = 38;
          assign(mu_mvn, nil_index_list(), multiply(normprobs, newCount),
            "assigning variable mu_mvn");
          current_statement__ = 39;
          assign(sig_mvn_inv, nil_index_list(),
            multiply(inverse(multiply(sig_mvn, transpose(sig_mvn))),
              transpose(sig_mvn)), "assigning variable sig_mvn_inv");
          current_statement__ = 40;
          assign(sig_mvn_inv, nil_index_list(),
            multiply(0.5,
              add(stan::model::deep_copy(sig_mvn_inv),
                transpose(stan::model::deep_copy(sig_mvn_inv)))),
            "assigning variable sig_mvn_inv");
          current_statement__ = 43;
          for (int k = 1; k <= (Nbins - 1); ++k) {
            current_statement__ = 41;
            assign(mu_mvn, cons_list(index_uni(k), nil_index_list()),
              (mu_mvn[(k - 1)] * newCount), "assigning variable mu_mvn");}
          current_statement__ = 44;
          lp_accum__.add(
            my_mvn_lpdf<false>(
              transpose(
                rvalue(data_counts_norm,
                  cons_list(index_uni(m), nil_index_list()),
                  "data_counts_norm")), mu_mvn, sig_mvn, pstream__));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "lognormal_inf_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double mu_mu;
      mu_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_mu = in__.scalar();
      current_statement__ = 1;
      mu_mu = stan::math::lub_constrain(mu_mu, -2, 50);
      double mu_sigma;
      mu_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      mu_sigma = in__.scalar();
      current_statement__ = 2;
      mu_sigma = stan::math::lub_constrain(mu_sigma, 0.001, 50);
      double sigma_alpha;
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_alpha = in__.scalar();
      current_statement__ = 3;
      sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0);
      double sigma_beta;
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_beta = in__.scalar();
      current_statement__ = 4;
      sigma_beta = stan::math::lb_constrain(sigma_beta, 0);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu = in__.scalar();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma = in__.scalar();
      current_statement__ = 6;
      sigma = stan::math::lb_constrain(sigma, 0);
      vars__.emplace_back(mu_mu);
      vars__.emplace_back(mu_sigma);
      vars__.emplace_back(sigma_alpha);
      vars__.emplace_back(sigma_beta);
      vars__.emplace_back(mu);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double mu_mu;
      mu_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_mu = context__.vals_r("mu_mu")[(1 - 1)];
      double mu_mu_free__;
      mu_mu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_mu_free__ = stan::math::lub_free(mu_mu, -2, 50);
      double mu_sigma;
      mu_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      mu_sigma = context__.vals_r("mu_sigma")[(1 - 1)];
      double mu_sigma_free__;
      mu_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      mu_sigma_free__ = stan::math::lub_free(mu_sigma, 0.001, 50);
      double sigma_alpha;
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_alpha = context__.vals_r("sigma_alpha")[(1 - 1)];
      double sigma_alpha_free__;
      sigma_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_alpha_free__ = stan::math::lb_free(sigma_alpha, 0);
      double sigma_beta;
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_beta = context__.vals_r("sigma_beta")[(1 - 1)];
      double sigma_beta_free__;
      sigma_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_beta_free__ = stan::math::lb_free(sigma_beta, 0);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu = context__.vals_r("mu")[(1 - 1)];
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(mu_mu_free__);
      vars__.emplace_back(mu_sigma_free__);
      vars__.emplace_back(sigma_alpha_free__);
      vars__.emplace_back(sigma_beta_free__);
      vars__.emplace_back(mu);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu_mu");
    names__.emplace_back("mu_sigma");
    names__.emplace_back("sigma_alpha");
    names__.emplace_back("sigma_beta");
    names__.emplace_back("mu");
    names__.emplace_back("sigma");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_mu");
    param_names__.emplace_back(std::string() + "mu_sigma");
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "sigma_beta");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_mu");
    param_names__.emplace_back(std::string() + "mu_sigma");
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "sigma_beta");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = lognormal_inf_model_namespace::lognormal_inf_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


